/*
File: compiler.h
Description: This is the header file for part two of the program.
*/



#include <string>
#include <fstream>
#include <vector>
#include <iterator>

#include "stack.h"

using namespace std;


// Location Flags
const int  InProgram = 1 << 0; // 001, 1

const int  InDeclarations = 1 << 1; //010, 2

const int  InStatements = 1 << 2; //100, 4




// enum type for the individual symbol in the CFG
// ROW indices for the parsing table are numbers 0 to 22
// COLUMND indices are numbers 23 to 41
enum SYMBOL {
	PROG, ID, MORE, DEC_LIST, DEC, MORE_DEC, TYPE, STAT_LIST, MORE_SLIST, STAT, WRITE, VALUE, ASSIGN, EXPR, E_PRIME, TERM,
	T_PRIME, FACTOR, NUMBER, MORE_DIGITS, SIGN, DIGIT, LETTER,
	BEGIN, END, VAR, INT, PRINT, PLUS, MINUS, TIMES, DIV, L_PAREN, R_PAREN, EQUALS, ABCDF, ZERO_TO_NINE, COLON, SEMI_COLON,
	COMMA, VALUE_EQUALS, PROGRAM};

// enum type for all of the possible states in the parsing table cells
enum STATE {
	REJECT, LAMBDA, INT_STATE, STAT_MORE_SLIST, STAT_LIST_STATE, WRITE_STATE,
	PRINT_VAL_ID, TERM_EPRIME, PLUS_TERM_EPRIME, FACTOR_TPRIME, NUM_STATE, SIGN_DIGIT_MDIGITS, PLUS_STATE, MINUS_TERM_EPRIME, MINUS_STATE,
	TIMES_FACTOR_TPRIME, DIV_FACTOR_TPRIME, PAREN_EXPR, LETTER_MORE, DEC_COL_TYPE, ID_MORE_DEC, ASSIGN_STATE, ID_EQUALS_EXPR, ID_STATE, LETTERS_STATE,
	DIGIT_MORE, DIGIT_MDIGITS, DIGITS_STATE, COMMA_DEC, VALUE_EQUALS_STATE, PROG_TO_END
};


// Predictive Parsing Table
const STATE ParseTable[23][19] = { 
/*<prog>*/		REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, PROG_TO_END,
/*<identifier>*/REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, LETTER_MORE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<more>*/		REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, LAMBDA, LAMBDA, LAMBDA, REJECT, LAMBDA, LAMBDA, LETTER_MORE, DIGIT_MORE, LAMBDA, LAMBDA, LAMBDA, REJECT, REJECT,
/*<dec-list>*/	REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, DEC_COL_TYPE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<dec>*/		REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, ID_MORE_DEC, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<more-dec>*/	REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, REJECT, COMMA_DEC, REJECT, REJECT,
/*<type>*/		REJECT, REJECT, REJECT, INT_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<stat-list>*/	REJECT, REJECT, REJECT, REJECT, STAT_MORE_SLIST, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, STAT_MORE_SLIST, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<more-slit>*/	REJECT, LAMBDA, REJECT, REJECT, STAT_LIST_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, STAT_LIST_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<stat>*/		REJECT, REJECT, REJECT, REJECT, WRITE_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, ASSIGN_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<write>*/		REJECT, REJECT, REJECT, REJECT, PRINT_VAL_ID, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<value>*/		REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, REJECT, REJECT, REJECT, REJECT, VALUE_EQUALS_STATE, REJECT,
/*<assign>*/	REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, ID_EQUALS_EXPR, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<expr>*/		REJECT, REJECT, REJECT, REJECT, REJECT, TERM_EPRIME, TERM_EPRIME, REJECT, REJECT, TERM_EPRIME, REJECT, REJECT, TERM_EPRIME, TERM_EPRIME, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<e-prime>*/	REJECT, REJECT, REJECT, REJECT, REJECT, PLUS_TERM_EPRIME, MINUS_TERM_EPRIME, REJECT, REJECT, REJECT, LAMBDA, REJECT, REJECT, REJECT, REJECT, LAMBDA, REJECT, REJECT, REJECT,
/*<term>*/		REJECT, REJECT, REJECT, REJECT, REJECT, FACTOR_TPRIME, FACTOR_TPRIME, REJECT, REJECT, FACTOR_TPRIME, REJECT, REJECT, FACTOR_TPRIME, FACTOR_TPRIME, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<t-prime>*/	REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, LAMBDA, TIMES_FACTOR_TPRIME, DIV_FACTOR_TPRIME, REJECT, LAMBDA, REJECT, REJECT, REJECT, REJECT, LAMBDA, REJECT, REJECT, REJECT,
/*<factor>*/	REJECT, REJECT, REJECT, REJECT, REJECT, NUM_STATE, NUM_STATE, REJECT, REJECT, PAREN_EXPR, REJECT, REJECT, ID_STATE, NUM_STATE, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<number>*/	REJECT, REJECT, REJECT, REJECT, REJECT, SIGN_DIGIT_MDIGITS, SIGN_DIGIT_MDIGITS, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, SIGN_DIGIT_MDIGITS, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<moredigits>*/REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, LAMBDA, LAMBDA, LAMBDA, REJECT, LAMBDA, REJECT, REJECT, DIGIT_MDIGITS, REJECT, LAMBDA, REJECT, REJECT, REJECT,
/*<sign>*/		REJECT, REJECT, REJECT, REJECT, REJECT, PLUS_STATE, MINUS_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, LAMBDA, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<digit>*/		REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, DIGITS_STATE, REJECT, REJECT, REJECT, REJECT, REJECT,
/*<letter>*/	REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT, LETTERS_STATE, REJECT, REJECT, REJECT, REJECT, REJECT, REJECT };




// Function Declarations for Part 2 of the program
bool     CheckVariable(vector<string>  IDList, string  ID);

string   GetStateString(STATE state);

string   GetSymbolString(SYMBOL  symbol);

SYMBOL   GetSymbol(string  word);

void  printStack(Stack<SYMBOL>  stack, ofstream&  out);

void  PushStack(STATE state, Stack<SYMBOL>* stack, ofstream  &out);

bool   Trace(ifstream& in, ofstream&  out);


